import { Button, Form, Input } from 'antd'
import { useState } from 'react'
import { AuthService } from './services/auth.service';

const validateMessages = {
	required: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ!'//–ø—Ä–∏ –ø—Ä–∞–≤–∏–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ requered
}
const authService = new AuthService();
function LoginForm(props) {
	const [isLogin, setIsLogin] = useState(true)
	const [authErrorMessage, setAuthErrorMessage] = useState('')
	const [form] = Form.useForm()//–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ—É –∏–∑ antd

	async function auth() {
		form
			.validateFields()
			.then(async () => {
				if (form.getFieldsValue().passwordRepeat) {
					const res = await authService.register(form.getFieldsValue())
					if (res.success) {
						props.setCurrentUserInfo(res.userInfo)
						props.setIsLoggedIn()
					} else {
						setAuthErrorMessage('–¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ –µ—Å—Ç—å!')
					}
				} else {
					const res = await authService.login(form.getFieldsValue())
					if (res.success) {
						props.setCurrentUserInfo(res.userInfo)
						props.setIsLoggedIn()
					} else {
						setAuthErrorMessage('–ù–µ –≤–µ—Ä–Ω—ã–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!')
					}
				}
			})
			.catch(err => {
				console.log('error', err)
			})
	}
	
	function changeAuthType() {
		setAuthErrorMessage('')
		setIsLogin(!isLogin)
		form.resetFields()
	}

	async function repeatPasswordFieldValidation(formRecord) {//–∫–∞—Å—Ç–æ–º–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
		const passwordField = formRecord.getFieldValue('password')//–ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ñ–æ—Ä–º—ã
		const passwordRepeatField = formRecord.getFieldValue('passwordRepeat')//–ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
		if (passwordRepeatField && passwordField !== passwordRepeatField) {
			throw Error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!')
		}
	}
	function checkPasswordStrength(rule, value) {
		if (value && value.length >= 6 && value.match(/[a-zA-Z]/)) {
		  return Promise.resolve();
		}
		return Promise.reject('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –º–∏–Ω–∏–º—É–º –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 1 –±—É–∫–≤—É!');
	  }
	return (
		<div className='login-page-img'>
			<div className='login-page'>
				<div className='login-form-wrapper'>
					<h1>{isLogin ? '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}</h1>
					<Form
						labelAlign='left'
						labelCol={{ span: 7 }}
						wrapperCol={{ span: 18 }}
						form={form}//–∑–¥–µ—Å—å –º—ã –∑–∞–∫—Ä–µ–ø–ª—è–µ–º —Ñ–æ—Ä–º—É
						validateMessages={validateMessages}//–∑–¥–µ—Å—å –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è
                        //–∞ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ disabled
					>
						<Form.Item
							label='–õ–æ–≥–∏–Ω'
							name='login'
							rules={[
								{
									required: true
								}
							]}
						>
							<Input allowClear />
						</Form.Item>
						<Form.Item
							label='–ü–∞—Ä–æ–ª—å'
							name='password'
							rules={[
								{
									required: true,
									validator: checkPasswordStrength
								}
							]}
						>
							<Input.Password allowClear />
						</Form.Item>
						{!isLogin ? (
							<Form.Item
								label='–ü–æ–≤—Ç–æ—Ä'
								name='passwordRepeat'
								rules={[//–æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–ª–µ–π 
									{
										required: true//–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
									},
									form => ({
										validator() {
											return repeatPasswordFieldValidation(form)
										}
									})
								]}
							>
								<Input.Password allowClear />
							</Form.Item>
						) : (
							<></>
						)}
					</Form>
					{authErrorMessage ? <div className='auth-error-message'>{authErrorMessage}</div> : <></>}
					<Button type='primary' onClick={auth} style={{ width: 200 }}>
						{isLogin ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
					</Button>
					<p>
						{isLogin ? '–ï—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã?ü§®' : '–ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –º–æ–∂–µ—Ç–µ –≤ –Ω–µ–≥–æ –≤–æ–π—Ç–∏ü§ìüëâ'}
						<Button type='link' onClick={changeAuthType}>
							{isLogin ? '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' : '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'}
						</Button>
					</p>
				</div>
			</div>
		</div>
	)
}

export default LoginForm
